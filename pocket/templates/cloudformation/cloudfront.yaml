AWSTemplateFormatVersion: "2010-09-09"
Description: spa configuration for webapp

Resources:
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: "{{ name_prefix_for_cloudformation }}oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "{{ domain }}"
      DomainValidationOptions:
        - DomainName: "{{ domain }}"
          HostedZoneId: "{{ hosted_zone_id }}"
      Tags:
        - Key: Name
          Value: "{{ object_prefix }}{{ slug }}-cloudfront-cert"
      ValidationMethod: DNS

  # {% for route in routes %}
  # {% if route.is_spa %}
  UrlFallbackFunction{{ route.yaml_key }}:
    Type: AWS::CloudFront::Function
    Properties:
      Name: "{{ object_prefix }}{{ slug }}-cloudfront-{{ route.name }}-fallback"
      AutoPublish: true
      FunctionCode: |
        {{ route.url_fallback_function_indent8 }}
      FunctionConfig:
        Comment: "Function to handle SPA url fallback"
        Runtime: cloudfront-js-2.0
  # {% endif %}
  # {% if route.is_versioned %}
  ResponseHeadersPolicy{{ route.yaml_key }}:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: "{{ name_prefix_for_cloudformation }}{{ route.name }}"
        CustomHeadersConfig:
          Items:
            - Header: "cache-control"
              Value: "max-age={{ route.versioned_max_age }}"
              Override: true
  # {% endif %}
  # {% endfor %}

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - OriginAccessControl
      - Certificate
      # {% for route in routes %}
      # {% if route.is_spa %}
      - UrlFallbackFunction{{ route.yaml_key }}
      # {% endif %}
      # {% if route.is_versioned %}
      - ResponseHeadersPolicy{{ route.yaml_key }}
      # {% endif %}
      # {% endfor %}
    Properties:
      DistributionConfig:
        Aliases:
          - "{{ domain }}"
        Enabled: true
        Origins:
          # {% for route in routes %}
          - Id: "{{ name_prefix_for_cloudformation }}{{ route.name }}"
            DomainName:
              Fn::Sub: "{{ bucket_name }}.s3.${AWS::Region}.amazonaws.com"
            OriginPath: "{{ origin_prefix }}"
            OriginAccessControlId:
              Fn::GetAtt: OriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: "" # Leave this blank because we use OAC(Origin Access Control)
          # {% endfor %}
        DefaultCacheBehavior:
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # Managed-CachingOptimized
          TargetOriginId: "{{ name_prefix_for_cloudformation }}{{ default_route.name }}"
          ViewerProtocolPolicy: "redirect-to-https"
          # {% if default_route.is_spa %}
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN:
                Fn::GetAtt: UrlFallbackFunction{{ default_route.yaml_key }}.FunctionMetadata.FunctionARN
          # {% endif %}
          # {% if default_route.is_versioned %}
          ResponseHeadersPolicyId:
            Ref: ResponseHeadersPolicy{{ default_route.yaml_key }}
          # {% endif %}
        # {% if extra_routes %}
        CacheBehaviors:
          # {% for route in extra_routes %}
          - CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # Managed-CachingOptimized
            TargetOriginId: "{{ name_prefix_for_cloudformation }}{{ route.name }}"
            ViewerProtocolPolicy: "redirect-to-https"
            PathPattern: "{{ route.path_pattern }}"
            # {% if route.is_spa %}
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN:
                  Fn::GetAtt: UrlFallbackFunction{{ route.yaml_key }}.FunctionMetadata.FunctionARN
            # {% endif %}
            # {% if route.is_versioned %}
            ResponseHeadersPolicyId:
              Ref: ResponseHeadersPolicy{{ route.yaml_key }}
            # {% endif %}
          # {% endfor %}
        # {% endif %}
        ViewerCertificate:
          AcmCertificateArn:
            Ref: Certificate
          SslSupportMethod: sni-only

  DNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - CloudFrontDistribution
    Properties:
      HostedZoneId: "{{ hosted_zone_id }}"
      Name: "{{ domain }}"
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # Z2FDTNDATAQYW2 is the fixed hosted zone id for cloudfront
        DNSName:
          Fn::GetAtt: CloudFrontDistribution.DomainName

  # {% for rf in redirect_from %}
  "Certificate{{ rf.yaml_key }}":
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "{{ rf.domain }}"
      DomainValidationOptions:
        - DomainName: "{{ rf.domain }}"
          HostedZoneId: "{{ hosted_zone_id }}"
      Tags:
        - Key: Name
          Value: "{{ object_prefix }}{{ slug }}-spa-cert-{{ rf.yaml_key }}"
      ValidationMethod: DNS

  "CloudFrontDistribution{{ rf.yaml_key }}":
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - "{{ rf.domain }}"
        Enabled: true
        Origins:
          - Id: "redirect-from"
            DomainName:
              Fn::Sub: "{{ rf.bucket_website_domain }}"
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # Managed-CachingDisabled
          TargetOriginId: "redirect-from"
          ViewerProtocolPolicy: "redirect-to-https"
        ViewerCertificate:
          AcmCertificateArn:
            Ref: "Certificate{{ rf.yaml_key }}"
          SslSupportMethod: sni-only

  "DNSRecord{{ rf.yaml_key }}":
    Type: AWS::Route53::RecordSet
    DependsOn:
      - "CloudFrontDistribution{{ rf.yaml_key }}"
    Properties:
      HostedZoneId: "{{ hosted_zone_id }}"
      Name: "{{ rf.domain }}"
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # Z2FDTNDATAQYW2 is the fixed hosted zone id for cloudfront
        DNSName:
          Fn::GetAtt: "CloudFrontDistribution{{ rf.yaml_key }}.DomainName"
  # {% endfor %}

Outputs:
  DistributionId:
    Value:
      Ref: CloudFrontDistribution
